package syo1;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

public class Main {
     static int count = 0;
     static int S;
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        S = sc.nextInt();//福袋に詰める商品の価値の合計の最小値
        int N = sc.nextInt();//福袋に詰める候補となる商品の数
        ArrayList<Integer> v = new ArrayList<>();
        for(int i = 0; i < N; i++){
            v.add(sc.nextInt());
        }

        for(int i = 1; i <= N; i++){
            getCombination(v,i);
        }


        System.out.println(count);
    }

    private static Set<ArrayList<Integer>> getCombination(ArrayList<Integer> v, Integer i) {
        Set<ArrayList<Integer>> ans = new HashSet<ArrayList<Integer>>();
        combination(v, i, ans);

        for (ArrayList<Integer> e : ans) {
            System.out.println(e);

            //福袋の中の合計値を出す
            int vSum = 0;
            for(Integer z : e){
                vSum += z;
            }
            System.out.println(vSum);

            //単品で価値の最小値を上回っていた場合カウント
            if(i == 1){
                if(vSum >= S){
                    count++;
                     System.out.println("適性福↑");
                }
            }
            else//福袋に複数商品が入っていたら
            {
                //福袋に詰める商品の価値の合計を S 以上だったら
                if(vSum >= S){
                    //福袋に入っている商品のうちいずれか 1 つ取り除いた場合S 未満だったらカウント
                    boolean flag = true;
                    for(Integer m : e){
                        if(vSum - m >= S){
                            flag = false;
                        }
                    }

                    if(flag == true){
                        count++;


                    }
                }
            }
        }
        return ans;
    }



    private static void combination(ArrayList<Integer> v, Integer i, Set<ArrayList<Integer>> ans) {
        if (v.size() == i) {
            ans.add(v);
            return;
        }
        for (int j = 0; j < v.size(); j++) {
            ArrayList<Integer> box = new ArrayList<Integer>();
            box.addAll(v);
            box.remove(j);
            combination(box,i,ans);
        }
    }
}